package org.example.service;

import org.example.domain.DBRestaurantRepository;
import org.example.domain.UserRepository;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import java.util.List;

public class CommandHandler {
    private final UserRepository userRepository;
    private final DBRestaurantRepository restaurantRepository;
    private final MessageSender messageSender;

    public CommandHandler(UserRepository userRepository,
                          MessageSender messageSender,
                          DBRestaurantRepository restaurantRepository) {
        this.userRepository = userRepository;
        this.messageSender = messageSender;
        this.restaurantRepository = restaurantRepository;
    }



    public void handle(Update update) {
        try {
            if (!update.hasMessage() || !update.getMessage().hasText()) return;

            long chatId = update.getMessage().getChatId();
            String text = update.getMessage().getText();

            switch (text) {
                case "/start":
                    handleStart(chatId, update.getMessage().getChat().getFirstName());
                    break;
                case "/remind":
                    handleRemind(chatId);
                    break;
                case "/myrestaurants":
                    handleShowRestaurants(chatId);
                    break;
                case "/help":
                    handleHelp(chatId);
                    break;
                default:
                    if (text.matches("^\\+7\\d{10}$")) {
                        processPhoneNumber(chatId, text);
                    } else {
                        messageSender.sendMessage(chatId,
                                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞. –ü—Ä–∏–º–µ—Ä: +79123456789");
                    }
            }
        } catch (TelegramApiException e) {
            System.err.println("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã: " + e.getMessage());
        }

    }

    private void processPhoneNumber(Long chatId, String phoneNumber) throws TelegramApiException {
        userRepository.saveUser(chatId, phoneNumber);
        messageSender.sendMessage(chatId,
                "‚úÖ –ù–æ–º–µ—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω! –¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.");
    }

    private void handleStart(Long chatId, String name) throws TelegramApiException {
        String answer = String.format(
                "–ü—Ä–∏–≤–µ—Ç, %s! –Ø –±–æ—Ç –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ —Å–¥–∞—á–µ —Ç–∞–±–µ–ª–µ–π.%n%n" +
                        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.",
                name
        );
        messageSender.sendMessage(chatId, answer);
    }

    private void handleRemind(Long chatId) throws TelegramApiException {
        if (!isUserRegistered(chatId)) {
            messageSender.sendMessage(chatId, "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –í–≤–µ–¥–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.");
            return;
        }

        List<String> restaurants = restaurantRepository.getRestaurantsByUserId(chatId);
        String message;

        if (restaurants.isEmpty()) {
            message = "‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: —Å–µ–≥–æ–¥–Ω—è –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å —Å–¥–∞—á–∏ —Ç–∞–±–µ–ª—è!";
        } else {
            message = buildRestaurantsMessage(restaurants);
        }

        messageSender.sendMessage(chatId, message);
    }


    private void handleHelp(Long chatId) throws TelegramApiException {
        String helpText = """
            –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
            /start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
            /remind - –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Ç–∞–±–µ–ª–µ
            /help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
            /myrestaurants - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤""";
        messageSender.sendMessage(chatId, helpText);
    }

    private void handleDefault(Long chatId, String text) throws TelegramApiException {
        if (text.matches("^\\+7\\d{10}$")) {
            handlePhoneNumber(chatId, text);
        } else {
            messageSender.sendMessage(chatId, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í–≤–µ–¥–∏—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.");
        }
    }

    private void handlePhoneNumber(Long chatId, String phoneNumber) throws TelegramApiException {
        userRepository.saveUser(chatId, phoneNumber);
        messageSender.sendMessage(chatId, String.format(
                "‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à –Ω–æ–º–µ—Ä %s —Å–æ—Ö—Ä–∞–Ω–µ–Ω.%n–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ —Å–¥–∞—á–µ —Ç–∞–±–µ–ª–µ–π.",
                phoneNumber
        ));
    }

    private boolean isUserRegistered(Long chatId) {
        return userRepository.findPhoneByChatId(chatId) != null;
    }

    private void handleShowRestaurants(Long chatId) throws TelegramApiException {
        if (!isUserRegistered(chatId)) {
            messageSender.sendMessage(chatId, "–ù–∞—á–Ω–∏—Ç–µ —á–∞—Ç —Å –±–æ—Ç–æ–º –∏—Å–ø–æ–ª—å–∑—É—è /start");
            return;
        }

        List<String> restaurants = restaurantRepository.getRestaurantsByUserId(chatId);
        String message = buildRestaurantsMessage(restaurants);
        messageSender.sendMessage(chatId, message);
    }

    private String buildRestaurantsMessage(List<String> restaurants) {
        StringBuilder sb = new StringBuilder();
        sb.append("üçΩ –°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã:\n");

        for (int i = 0; i < restaurants.size(); i++) {
            sb.append(i + 1).append(". ").append(restaurants.get(i)).append("\n");
        }

        return sb.toString();
    }
}

